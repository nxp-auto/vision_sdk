NXP Vision SDK (VSDK) RTM 1.6.0 Yocto Project Manifests
    for Advanced driver-assistance systems (ADAS)
==========================================================

NXP Vision SDK Yocto Project Manifests provides support for the NXP Vision SDK to
integrate Linux BSP Yocto Layer by using Meta-adas Yocto Layer.
This provides a user-friendly interface to create a complete Linux distribution
image containing the VSDK functionalities.
In the process of image generation, the following tasks are automatically
executed as part of the meta-adas functionalities:
- Device tree update to add the VSDK requirements
- VSDK Kernel modules build and deployment
- VSDK demos and applications build and deployment
- Build and deploy of 3-rd party libraries dependencies for VSDK
- Deploy the VSDK binaries to root file system and generate the SD card image


First time setup
================

To get the Vision SDK Yocto Project Manifests you need to have `repo` and
its prerequisites installed.
This only needs to be done once.


Install Desktop PC dependencies:
  - python 2.x - 2.6 or newer ($: sudo apt-get install python)
  - git 1.8.3 or newer ($: sudo apt-get install git)
  - curl ($: sudo apt-get install curl)
  - gcc 4.9.x to 5.x ($: sudo apt-get install gcc)
  - Ubuntu 14.04 LTS or Ubuntu 16.04 LTS are supported


Install the `repo` utility:

    $: mkdir ~/bin
    $: curl http://commondatastorage.googleapis.com/git-repo-downloads/repo  > ~/bin/repo
    $: chmod a+x ~/bin/repo
    $: PATH=${PATH}:~/bin


Download the Vision SDK Yocto Project Manifests into your directory:
====================================================================

The repository provides two manifest files, particularized for different use
cases.
The desired manifest file is selected by specifying it in the repo init command,
using parameter -m <manifest file>

The manifests are delivered in two formats:
 - adas.xml -> it should allow fetching external repositories
               (e.i. https://source.codeaurora.org)
 - adas-bitbucket.xml -> it would allow fetching internal bitbucket development
                         repositories.

NXP external repositories adas.xml, please use:

    $: mkdir fsl-auto-yocto-vsdk
    $: cd fsl-auto-yocto-vsdk
    $: repo init -u repo init -u https://source.codeaurora.org/external/autobsps32/extra/vision-sdk -b vision_sdk_rtm_1.6.0 -m adas.xml
    $: repo sync

This will download the sources for the NXP Auto Linux BSP23.0 intagrated into
Vision SDK.

NXP internal repositories adas-bitbucket.xml, please use:

    $: mkdir fsl-auto-yocto-vsdk
    $: cd fsl-auto-yocto-vsdk
    $: repo init -u https://bitbucket.sw.nxp.com/scm/vswat/vsdk-manifest.git -b vision_sdk_rtm_1.6.0 -m adas-bitbucket.xml
    $: repo sync


Creating a Build Directory for a NXP Vision SDK Yocto release:
==============================================================

Now you can create a build directory in the Vision SDK Yocto root by running
the command:

    $: . nxp-setup-alb.sh -m <machine>

    where:
       <machine> is any Vsion SDK target (e.g. s32v234sbc, s32v234evb, s32v234bbmini etc).


Adding Vision SDK RTM 1.6.0 to S32V234 rootfs
=============================================

- The Vision SDK RTM 1.6.0 installer (VisionSDK_S32V2_RTM_1_6_0.bin file) should
  be available for download in the Automotive SW Vision Software release download
  section on:
    https://nxp.flexnetoperations.com/control/frse/product?plneID=713087

- Install the Vision SDK RTM 1.6.0 for Yocto integration to a
  folder of your choice (e.g. “/opt/fsl_local_mirror”):

- Edit the file conf/local.conf  (e.g. build_s32v234evb_release/conf/local.conf)
  in your build folder to specify the path to the VSDK folder. For example:

      FSL_LOCAL_MIRROR = "file:////opt/fsl_local_mirror/VisionSDK_S32V2_RTM_1_6_0"

  Note: the name of s32v234_sdk folder should not be added in the FSL_LOCAL_MIRROR.
  This is automatically appended in the meta-adas recipes.

- You also need to confirm that you accept NXP's EULA by adding the following
  to the build folder's conf/local.conf (e.g. build_s32v234evb_release/conf/local.conf):

      ACCEPT_FSL_EULA = "1"

- The VSDK demos depend on ffmpeg library (build time or run time) that
  has commercial license:
    see recipes-libs-3rdparty/ffmpeg/ffmpeg_2.8.5.bb
  In order to use the ffmpeg as dependency into the image, you must acknowledge that
  you are aware of the ffmpeg license requirements by adding the following line
  in the conf/local.conf (e.g. build_s32v234evb_release/conf/local.conf):

      LICENSE_FLAGS_WHITELIST_append = " commercial "

- In a typical project the developer will use vanilla VisionSDK libraries,
  e.g. System Libraries, without any changes as provided by the VisionSDK installer,
  but Yocto should build everything from scratch, so we change the default behavior
  to re-build System Libraries.
  The re-build of System Libraries can be enforced by using the PRE_BUILT_SYSTEM_LIBS
  variable in conf/local.conf (e.g. build_s32v234evb_release/conf/local.conf):
    * PRE_BUILT_SYSTEM_LIBS=0 rebuild System Libraries (default)
    * PRE_BUILT_SYSTEM_LIBS=1 use pre-built System Libraries
  
  You can use pre-built System Libraries by adding the following line
  in the conf/local.conf (e.g. build_s32v234evb_release/conf/local.conf):

      PRE_BUILT_SYSTEM_LIBS = 1


Adding GPU drivers to S32V234 rootfs
====================================

The GPU archive files GPU_userspace_binaries_and_VTK_tools_6.2.4.zip should be
available for download in the Linux BSP 23.0 release download section on:
  http://www:nxp:com/webapp/swlicensing/sso/downloadSoftware:sp?catid=SW32XX-LINUXBSP01D

The archive file contains folders:
  - Vivante_userspace_libraries_and_demos
  - Vivante_VTK: Vivante Tool Kit

To add GPU drivers to S32V234 rootfs, follow the steps as below:

  - Add the following line in your chosen image script (e.g. meta-alb/recipes-fsl/images/fsl-image-auto.bb):

        IMAGE_INSTALL += "gpu-viv-bin-s32v2xx"

  - Copy Vivante_userspace_libraries_and_demos and Vivante_VTK folders from
    the GPU drivers previously downloaded in the location set in FSL_LOCAL_MIRROR
    variable

  - Add the following line in the conf/local.conf (e.g. build_s32v234evb_release/conf/local.conf):

        DISTRO_FEATURES_DEFAULT_append = " gpu"


Build an image:
===============

In the buid directory created by the setup script, you can run the command:

    $: bitbake fsl-image-vsdk


Running the above command would be enough to completely build u-boot, kernel,
modules, and a rootfs ready to be deployed. Look for a build result in
`build_<machine>/tmp/deploy/images/`.

The file `<image-name>.sdcard` is a disk image with all necessary partitions and
contains the bootloader, kernel and rootfs. You can just low-level copy the data
on this file to the SD card device using dd as on the following command example:

    $: sudo dd if=<image-name>.sdcard of=/dev/sd<partition> bs=1M && sync


Make sure that any partitions on the card are properly unmounted before writing
the card image, or you may have a corrupted card image in the end.
Also make sure to properly "sync" the filesystem before ejecting the card to ensure
all data has been written.

To deploy only the rootfs to the target partition, run:

    $: sudo tar -xzf <image-name>.tar.gz -C <destination>

    where <destination> is the destination partition (as mounted on the host).

Note that builds with bitbake accumulate in the deployment directory.
You may want to delete older irrelevant images after repeated builds.
The very first build ever will take very long because a lot of one-time
house-keeping and building has to happen. You want to have a powerful build machine.

Note the SOURCE_THIS file to be used when going back to building with a new shell.

The rootfs is fairly reasonable in completeness for basic efforts and
contains a variety of basic tools for remote connection and
mounting of NFS or other drives.


Re-building VSDK APEX graphs (optional)
=======================================

The VSDK archive provides pre-built APEX graphs built with TCT compiler.
The pre-built graphs allow building the VSDK Linux applications and modules
without installing an APU compiler

For re-building the APU graphs the user should perform the following steps:

  - Independently install an APU compiler, outside Yocto. Please follow the
    VSDK documentation for installing a standalone APU compiler

  - Configure the Yocto build to use the installed APU compiler (previous step)
    and re-build the VSDK image.
    Along with the standard build using the pre-compiled graphs, the following
    setting should be added in build folder's conf/local.conf

        APU_COMPILER_NXP = "<path to the installed NXP APU compiler>"

        or

        APU_COMPILER_TCT = "<path to the installed TCT APU compiler>"

    For example:

        APU_COMPILER_NXP = "/home/user/APU_Compiler_v1.0"

Note: when changing the configuration from pre-built graphs to buildable graph
  or switching between NXP and TCT compilers, it is recommended to clean the
  VSDK sources.


VSDK Usage
==========
For the final image, the VSDK modules are automatically inserted at boot time.
The VSDK demos are located in folder /vsdk/demos/
The user can change the default install path by setting the desired location in
conf/local.conf (e.g. build_s32v234evb_release/conf/local.conf), for example:

    VSDK_OUTPUT_DIR_NAME="/usr/src/vsdk/demos"

For details about how to run the VSDK demos, use the VSDK documentation
delivered inside the VSDK archive: s32v234_sdk/docs and s32v234_sdk/ReleaseNotes.txt
